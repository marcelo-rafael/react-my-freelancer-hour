{"version":3,"sources":["components/fieldset/index.js","components/fieldset/fieldSet.js","App.js","serviceWorker.js","index.js"],"names":["FieldSet","props","react_default","a","createElement","legend","className","htmlFor","idInput","label","id","type","value","onChange","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setGanhoMes","e","setState","ganhoMes","parseInt","target","setHorasDias","horasDias","setDiasSemana","diasSemana","setSemanasFerias","semanasFerias","calculaValorHora","preventDefault","console","log","totalHoras","state","valorDeHora","parseFloat","toFixed","valueHour","onSubmit","fieldset","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b698d33d.chunk.js","sourcesContent":["import FieldSet from \"./fieldSet\";\n\nexport default FieldSet;\n","import React from \"react\";\n\nconst FieldSet = (props) => {\n  return (\n    <fieldset>\n      <legend>{props.legend}</legend>\n      <div className=\"formulario-grupo\">\n        <label htmlFor={props.idInput}>{props.label}</label>\n        <input\n          id={props.idInput}\n          type={props.type}\n          value={props.value}\n          onChange={props.onChange}\n        />\n      </div>\n    </fieldset>\n  );\n};\n\nexport default FieldSet;\n","import React from \"react\";\nimport FieldSet from \"./components/fieldset\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    //criar o construtor que vai passar propriedades\n    super(props);\n    //State serve para tornar os componentes dinâmicos\n    this.state = {\n      //estabelecer as propriedades de state dos elementos\n      ganhoMes: 0, //text começa com o campo vazio (string vazia)\n      horasDias: 0, //number começa com 0 -> estado inicial do elemento\n      diasSemana: 0, //number começa com 0\n      semanasFerias: 0, //number começa com 0\n      valueHour: 0,\n    };\n  }\n\n  //functions criadas para renderizar os componentes dinâmicos conforme o input é preenchido\n\n  setGanhoMes = (e) => {\n    //criar uma function que atualiza o valor da variável\n    this.setState({\n      //setState: *changes to the component state and tells React that this component and its children need to be re-rendered with the updated state.\n      ganhoMes: parseInt(e.target.value), //parseIt: para que o valor retorne como número, e não como string\n    });\n  };\n  setHorasDias = (e) => {\n    this.setState({\n      horasDias: parseInt(e.target.value),\n    });\n  };\n  setDiasSemana = (e) => {\n    this.setState({\n      diasSemana: parseInt(e.target.value),\n    });\n  };\n  setSemanasFerias = (e) => {\n    this.setState({\n      semanasFerias: parseInt(e.target.value),\n    });\n  };\n\n  calculaValorHora = (e) => {\n    e.preventDefault();\n    console.log(\"funciona o botão!\");\n\n    const horasPorSemana = this.state.horasDias * this.state.diasSemana;\n    const horasDeFerias = this.state.diasSemana * this.state.semanasFerias;\n    const totalHoras = 52.1 * horasPorSemana - horasDeFerias;\n    const ganhoPorAno = this.state.ganhoMes * 12;\n\n    let valorDeHora = ganhoPorAno / totalHoras;\n    valorDeHora += 0.2 * valorDeHora;\n    valorDeHora = parseFloat(valorDeHora).toFixed(2);\n\n    this.setState({\n      // para atualizar o valor na tela! Chama o virtual DOM, o virtual DOM vê a diferença e ele altera a\n      //tela sem precisar atualizar a página por completo\n      valueHour: valorDeHora, //altera o HTML de acordo com o valor final\n    });\n  };\n  // quem controla o value dos inputs é o React,\n  // e assim você só o torna dinâmico com o onChange e o State\n\n  render() {\n    return (\n      <main className=\"conteudo-principal\">\n        <section className=\"secao\">\n          <header className=\"cabecalho\">Calcule o seu valor/hora!</header>\n          <article className=\"conteudo\">\n\n            <form\n              onSubmit={this.calculaValorHora}\n              className=\"secao-formulario\"\n            >\n              <div className=\"App\">\n                <FieldSet\n                  legend=\"Quanto você quer ganhar por mês ?\"\n                  label=\"Quantidade por mês\"\n                  idInput=\"ganho-mes\"\n                  type=\"number\"\n                  value={this.state.ganhoMes}\n                  onChange={this.setGanhoMes}\n                />\n\n                <FieldSet\n                  legend=\"Quantas horas você quer trabalhar por dia?\"\n                  label=\"Horas por dia\"\n                  idInput=\"horas-dia\"\n                  type=\"number\"\n                  value={this.state.horasDias}\n                  onChange={this.setHorasDias}\n                />\n\n                <FieldSet\n                  legend=\"Quantos dias você quer trabalhar por semana ?\"\n                  label=\"Dias por Semana\"\n                  idInput=\"dias-semana\"\n                  type=\"number\"\n                  value={this.state.diasSemana}\n                  onChange={this.setDiasSemana}\n                />\n\n                <FieldSet\n                  legend=\"Quantas semanas por ano você quer tirar de férias ?\"\n                  label=\"Semanas por ano\"\n                  idInput=\"semanas-ferias\"\n                  type=\"number\"\n                  value={this.state.semanasFerias}\n                  onChange={this.setSemanasFerias}\n                />\n\n                <button className=\"button\" type=\"submit\">\n                  Calcular\n                </button>\n              </div>\n            </form>\n          </article>\n\n          <footer className=\"rodape\">\n            <h3 className=\"rodape-valor\">\n              <span>{this.state.valueHour}</span>\n              <small>/hora</small>\n            </h3>\n            <p className=\"rodape-legenda\">Seu valor por hora</p>\n          </footer>\n        </section>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}